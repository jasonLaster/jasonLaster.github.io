<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
                <title>The Daily Picayune</title>
                <description>Custom bike builders who do not call initialize</description>
                <link>http://jasonlaster.github.io/</link>
                <atom:link href="http://jasonlaster.github.io//feed.xml" rel="self" type="application/rss+xml" />
                
                        <item>
                                <title>What happens when DevTools Pauses</title>
                                <description>&lt;h3&gt;What happens when a breakpoint is hit in DevTools&lt;/h3&gt;

&lt;p&gt;The frontend receives a &amp;quot;Debugger.paused&amp;quot; method&lt;/p&gt;

&lt;p&gt;The method contains four params: callFrames, reason, data, hitBreakpoints, asyncStackTrace.  &lt;/p&gt;

&lt;p&gt;The callFrame has fields: callFrameId, functionName, location, scopeChain, this&lt;/p&gt;

&lt;p&gt;There are several reasons execution could stop:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;XHR, DOM, EventListener, exception, assert, CSPViolation, debugCommand, promiseRejection, AsyncOperation, other&lt;/li&gt;
&lt;li&gt;When you set a breakpoint in the source panel, the reason is other. At this point, the hitBreakpoints field will show the script, line number and column number of the hit breakpoint (e.g. http://localhost:3000/bundle.js:26641:0)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A sample &lt;code&gt;callFrame&lt;/code&gt; result looks something like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;functionName&lt;/code&gt; and &lt;code&gt;location&lt;/code&gt; are useful for seeing where the execution stopped&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;scopeChain&lt;/code&gt; will show the list of closures at that frame (local, closure..., global)&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;this&lt;/code&gt; field shows the current context at that frame.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;callFrameId&lt;/code&gt; is really cool. &lt;code&gt;ordinal&lt;/code&gt; refers to the frame number or depth. I&amp;#39;m not sure what &lt;code&gt;injectedScriptId&lt;/code&gt; refers to.&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t forget, there&amp;#39;s an array of callFrames&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &amp;quot;callFrameId&amp;quot;: &amp;quot;{\&amp;quot;ordinal\&amp;quot;:0,\&amp;quot;injectedScriptId\&amp;quot;:2}&amp;quot;,
  &amp;quot;functionName&amp;quot;: &amp;quot;module.exports.Router.extend.index&amp;quot;,
  &amp;quot;location&amp;quot;: {
    &amp;quot;scriptId&amp;quot;: &amp;quot;34&amp;quot;,
    &amp;quot;lineNumber&amp;quot;: 26642,
    &amp;quot;columnNumber&amp;quot;: 23
  },
  &amp;quot;scopeChain&amp;quot;: [
    {
      &amp;quot;object&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;objectId&amp;quot;: &amp;quot;{\&amp;quot;injectedScriptId\&amp;quot;:2,\&amp;quot;id\&amp;quot;:1}&amp;quot;,
        &amp;quot;className&amp;quot;: &amp;quot;Object&amp;quot;,
        &amp;quot;description&amp;quot;: &amp;quot;Object&amp;quot;
      },
      &amp;quot;type&amp;quot;: &amp;quot;local&amp;quot;
    },
    {
      &amp;quot;object&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;objectId&amp;quot;: &amp;quot;{\&amp;quot;injectedScriptId\&amp;quot;:2,\&amp;quot;id\&amp;quot;:2}&amp;quot;,
        &amp;quot;className&amp;quot;: &amp;quot;Object&amp;quot;,
        &amp;quot;description&amp;quot;: &amp;quot;Object&amp;quot;
      },
      &amp;quot;type&amp;quot;: &amp;quot;closure&amp;quot;
    },
    {
      &amp;quot;object&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
        &amp;quot;objectId&amp;quot;: &amp;quot;{\&amp;quot;injectedScriptId\&amp;quot;:2,\&amp;quot;id\&amp;quot;:3}&amp;quot;,
        &amp;quot;className&amp;quot;: &amp;quot;Window&amp;quot;,
        &amp;quot;description&amp;quot;: &amp;quot;Window&amp;quot;
      },
      &amp;quot;type&amp;quot;: &amp;quot;global&amp;quot;
    }
  ],
  &amp;quot;this&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
    &amp;quot;objectId&amp;quot;: &amp;quot;{\&amp;quot;injectedScriptId\&amp;quot;:2,\&amp;quot;id\&amp;quot;:4}&amp;quot;,
    &amp;quot;className&amp;quot;: &amp;quot;child&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;child&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;How does the &amp;quot;Scope Variables&amp;quot; field update?&lt;/h3&gt;

&lt;p&gt;Scenario: We click on the &amp;quot;this&amp;quot; field in the local scope section.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The front-end makes a Runtime.getProperties request&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
    &amp;quot;id&amp;quot;:28,
    &amp;quot;method&amp;quot;:&amp;quot;Runtime.getProperties&amp;quot;,
    &amp;quot;params&amp;quot;:{
      &amp;quot;objectId&amp;quot;:&amp;quot;{\&amp;quot;injectedScriptId\&amp;quot;:2,\&amp;quot;id\&amp;quot;:4}&amp;quot;,
      &amp;quot;ownProperties&amp;quot;:true,
      &amp;quot;accessorPropertiesOnly&amp;quot;:false
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;The server replies with a result response with id that matches the request&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &amp;quot;id&amp;quot;: 28,
  &amp;quot;result&amp;quot;: {
    &amp;quot;result&amp;quot;: [&amp;quot;properties...&amp;quot;]
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A typical property looks something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &amp;quot;writable&amp;quot;: true,
  &amp;quot;enumerable&amp;quot;: true,
  &amp;quot;configurable&amp;quot;: true,
  &amp;quot;name&amp;quot;: &amp;quot;channel&amp;quot;,
  &amp;quot;isOwn&amp;quot;: true,
  &amp;quot;value&amp;quot;: {
      &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
      &amp;quot;objectId&amp;quot;: &amp;quot;{\&amp;quot;injectedScriptId\&amp;quot;:2,\&amp;quot;id\&amp;quot;:63}&amp;quot;,
      &amp;quot;className&amp;quot;: &amp;quot;Radio.Channel&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;Radio.Channel&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unpacking this a bit, the &lt;code&gt;name&lt;/code&gt; field and value &lt;code&gt;description&lt;/code&gt; are especially cool.
Note that when we look at the variables in the scope variables section we&amp;#39;re really looking
at a tree with leaves that look like (name: value.description). The &lt;code&gt;writable&lt;/code&gt;, &lt;code&gt;isOwn&lt;/code&gt;, &lt;code&gt;enumerable&lt;/code&gt; fields are also useful but are less interesting for the UI.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A sequence of actions occur and finally the new &lt;code&gt;this&lt;/code&gt; properties are shown.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There&amp;#39;s a lot here to unpack here, but first just skim the call stack. It&amp;#39;s interesting by itself.&lt;/p&gt;

&lt;p&gt;InspectorBackend.js&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;InspectorBackendClass.WebSocketConnection._onMessage&lt;/li&gt;
&lt;li&gt;InspectorBackendClass.Connection.dispatch&lt;/li&gt;
&lt;li&gt;InspectorBackendClass.AgentPrototype.dispatchResponse&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RemoteObject.js&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;remoteObjectBinder&lt;/li&gt;
&lt;li&gt;ownPropertiesCallback&lt;/li&gt;
&lt;li&gt;processCallback&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ObjectPropertiesSection.js&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;callback&lt;/li&gt;
&lt;li&gt;WebInspector.ObjectPropertyTreeElement.populateWithProperties&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;treeoutline.js&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TreeElement.appendChild&lt;/li&gt;
&lt;li&gt;TreeElement.insertChild&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ObjectPropertiesSection.js&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WebInspector.ObjectPropertyTreeElement.onattach&lt;/li&gt;
&lt;li&gt;WebInspector.ObjectPropertyTreeElement.update&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first thing to note is that &lt;code&gt;this&lt;/code&gt; is really a Remote Object.
The remote object, requested its own properties and when the request came back, the object
handles processing the response and converting it into reasonable data.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a simplified version of &lt;code&gt;RemoteObject.remoteObjectBinder&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;function remoteObjectBinder(error, properties, internalProperties) {
  var result = [];
  for (var i = 0; properties &amp;amp;&amp;amp; i &amp;lt; properties.length; ++i) {
    var property = properties[i];
    var propertyValue = createRemoteObject(property.value)
    result.push(new RemoteObjectProperty(property.name, propertyValue));
  }

  var internalPropertiesResult = [];
  for (var i = 0; i &amp;lt; internalProperties.length; i++) {
    var property = internalProperties[i];
    var propertyValue = createRemoteObject(property.value);
    internalPropertiesResult.push(new RemoteObjectProperty(property.name, propertyValue));
  }

  callback(result, internalPropertiesResult);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once the remote object knows about its properties and internal properties, it passes
the data onto to the object property tree element &lt;code&gt;populateWithProperties&lt;/code&gt;. You can guess,
what this guy will do.&lt;/p&gt;

&lt;p&gt;The job of &lt;code&gt;populateWithProperties&lt;/code&gt; is to create an object property tree element for each property.
There are tons of cases here, but the simplified version looks something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;function(treeNode, properties, internalProperties, skipProto, value, emptyPlaceholder) {

  for (var i = 0; i &amp;lt; properties.length; ++i) {
    var property = properties[i];

    if (skipProto &amp;amp;&amp;amp; property.name === &amp;quot;__proto__&amp;quot;) continue;
    treeNode.appendChild(new ObjectPropertyTreeElement(property));
  }

  for (var i = 0; i &amp;lt; internalProperties.length; i++) {
    treeNode.appendChild(new ObjectPropertyTreeElement(internalProperties[i]));
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;#39;re now at the point, where we&amp;#39;re ready to show all of &lt;code&gt;this&lt;/code&gt;&amp;#39;s properties as child nodes of &lt;code&gt;this&lt;/code&gt;.
In this exampe, &lt;code&gt;this&lt;/code&gt; has 9 properties:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;channel, _events, _listeningTo, routes, container, collection, options, active, __proto__
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you remember from above, &lt;code&gt;populateWithProperties&lt;/code&gt; creates one Tree Element for each property.
When each element is created, it&amp;#39;s &lt;code&gt;update&lt;/code&gt; function is called and that&amp;#39;s where the magic happens:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;function update() {
  this.nameElement = createNameElement(this.property.name);
  this.valueElement = createValueElement(this.property.value, this.listItemElement);
  var separatorElement = createElementWithClass(&amp;quot;span&amp;quot;, &amp;quot;separator&amp;quot;).textContent = &amp;quot;: &amp;quot;;
  this.listItemElement.appendChildren(this.nameElement, separatorElement, this.valueElement);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Voila, each property is now an element with a name and value and is shown below the &lt;code&gt;this&lt;/code&gt; variable.&lt;/p&gt;

&lt;h3&gt;How did the DevTools backend send the &amp;quot;Debugger.paused&amp;quot; message to the Inspector?&lt;/h3&gt;

&lt;p&gt;This story begins with V8 and the running javascript VM which detects the pause.
While, this is cool, for our purposes I&amp;#39;m going to skip to the part of the story where
the backend actually sends the message and associated data, trust me, this story is good enough!&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an overview, that we&amp;#39;ll unpack below.&lt;/p&gt;

&lt;p&gt;InspectorDebuggerAgent.cpp&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;InspectorDebuggerAgent::didPause&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;InspectorFrontend.cpp  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;m&lt;em&gt;frontend-&amp;gt;paused(currentCallFrames(), m&lt;/em&gt;breakReason, m_breakAuxData, hitBreakpointIds, currentAsyncStackTrace());&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;InspectorDebuggerAgent.cpp&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PassRefPtr&lt;Array&lt;CallFrame&gt; &amp;gt; InspectorDebuggerAgent::currentCallFrames&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;InjectedScript.cpp&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;injectedScript.wrapCallFrames(m_currentCallStack, 0);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;InjectedScriptSource.js&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ScriptFunctionCall function(injectedScriptObject(), &amp;quot;wrapCallFrames&amp;quot;);&lt;/li&gt;
&lt;li&gt;InjectedScript.CallFrameProxy(depth, callFrame, asyncOrdinal);&lt;/li&gt;
&lt;li&gt;InjectedScript.wrapObject(callFrame.thisObject, &amp;quot;backtrace&amp;quot;)&lt;/li&gt;
&lt;li&gt;new RemoteObject(callFrame.thisObject)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Inspector Debugger Agent, is a good enough place for the story to start.
One of the interesting devTools patterns is that when there&amp;#39;s a data object that&amp;#39;s shared
between the frontend and backend, there&amp;#39;s often a model on the frontend and agent on the backend.
Think of it like the agent doing the work to populate the model.&lt;/p&gt;

&lt;p&gt;In this case, the InspectorDebuggerAgent reacts to the pause event and calls the frontend paused method.
The fact that the paused method matches up to the &amp;quot;Debugger.paused&amp;quot; message is not a coincidence.
When you investigate the frontend object, you discover it&amp;#39;s type descends from InspectorFrontend, which is a special
type of object defined by generated InspectorFrontend header and cpp files. These files are built by a &lt;strong&gt;python&lt;/strong&gt; file called CodeGeneratorInspector.py, which reads the protocol json configuration file and builds the cpp files at build time!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;m_frontend-&amp;gt;paused(currentCallFrames(), m_breakReason, m_breakAuxData, hitBreakpointIds, currentAsyncStackTrace());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, the first part of the answer is that backend sends the &amp;quot;Debugger.paused&amp;quot; message through a specially built class called InspectorFrontend.cpp. The second question, we want to answer is how was the data for the message constructed. This data has super interesting information about the location and reason of the pause, the call frames, and context.&lt;/p&gt;

&lt;p&gt;Determining how the call frame data is constructed is a little bit of a rabbit hole, but it&amp;#39;s super interesting. So lets get started.&lt;/p&gt;

&lt;p&gt;.1. currentCallFrames&lt;/p&gt;

&lt;p&gt;CurrentCallFrames is a simple helper method for querying injected scripts.
Note, we pass the call stack down to script to serialize the call frame data.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;PassRefPtr&amp;lt;Array&amp;lt;CallFrame&amp;gt; &amp;gt; InspectorDebuggerAgent::currentCallFrames() {
  InjectedScript injectedScript = m_injectedScriptManager-&amp;gt;injectedScriptFor(m_pausedScriptState.get());
  return injectedScript.wrapCallFrames(m_currentCallStack, 0);
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.2. wrapCallFrames&lt;/p&gt;

&lt;p&gt;The injected script manager does something crazy cool. Something so cool, that if you don&amp;#39;t
stop doing what you&amp;#39;re doing and pause for 10 seconds, you&amp;#39;ve got no pulse. The script manager
asks javascript to serialize the call frames! This happens here with the new scriptFunctionCall and
&lt;code&gt;callFunctionWithEvalEnabled&lt;/code&gt;. In hindsight, asking v8 to serialize it&amp;#39;s own call frames is a brilliant
strategy, what business does cpp have knowing all of javascript&amp;#39;s dirty secrets?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;PassRefPtr&amp;lt;Array&amp;lt;CallFrame&amp;gt; &amp;gt; InjectedScript::wrapCallFrames(const ScriptValue&amp;amp; callFrames, int asyncOrdinal) {
  ScriptFunctionCall function(injectedScriptObject(), &amp;quot;wrapCallFrames&amp;quot;);
  function.appendArgument(callFrames);
  function.appendArgument(asyncOrdinal);
  ScriptValue callFramesValue = callFunctionWithEvalEnabled(function);

  return Array&amp;lt;CallFrame&amp;gt;::runtimeCast(callFramesValue);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.3. wrapCallFrames (part 2)&lt;/p&gt;

&lt;p&gt;On the JS side of the isle, things become simple again.
Here we create a couple CallFrameProxy objects. Why, because we like our data objects in devTools land.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;function wrapCallFrames(callFrame, asyncOrdinal) {
  var result = [];
  var depth = 0;
  do {
    result[depth] = new InjectedScript.CallFrameProxy(depth, callFrame, asyncOrdinal);
    callFrame = callFrame.caller;
    ++depth;
  } while (callFrame);

  return result;
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.4. CallFrameProxy&lt;/p&gt;

&lt;p&gt;The call frame should have an id, location, scope chain, and context.
+ The scope chain will be our closures (local, ..., global).
+ The context will be what shows up in &lt;code&gt;this&lt;/code&gt; in the scope variables section
+ and if the pause is right after the return statement has been evaluated, &lt;code&gt;isAtReturn&lt;/code&gt; will be true and we&amp;#39;ll serialize the return value aswell.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;InjectedScript.CallFrameProxy = function(ordinal, callFrame, asyncOrdinal) {
  this.callFrameId = {
    ordinal: ordinal,
    injectedScriptId: injectedScriptId,
    asyncOrdinal: asyncOrdinal
  };

  this.location = {
    scriptId: callFrame.sourceID,
    lineNumber: callFrame.line,
    columnNumber: callFrame.column,
  };

  this.scopeChain = this._wrapScopeChain(callFrame);

  this.this = injectedScript._wrapObject(callFrame.thisObject, &amp;quot;backtrace&amp;quot;);

  if (callFrame.isAtReturn) {
    this.returnValue = injectedScript._wrapObject(callFrame.returnValue, &amp;quot;backtrace&amp;quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.5. wrapObject&lt;/p&gt;

&lt;p&gt;Did you see all of the &lt;code&gt;_wrapX&lt;/code&gt; calls above? Well this is what it basically looks like.
Don&amp;#39;t be afraid, RemoteObjects is actually a really fundamental piece of DevTools. Remember how we
had RemoteObjects on the frontend side, it turns out that they have a 1:1 sibling on the backend as well.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;_wrapObject = function(object, forceValueType, generatePreview) {
  return new InjectedScript.RemoteObject(object, forceValueType, generatePreview);
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.6. RemoteObject&lt;/p&gt;

&lt;p&gt;RemoteObject takes an object and serializes. Almost every object shown in chrome devtools has
been serialized by RemoteObject and all of it&amp;#39;s data shipped up the inspector. When you look at
the constructor, you&amp;#39;ll see a bunch of things you might expect (type, value, preview).&lt;/p&gt;

&lt;p&gt;One feature, which is still experimental, but should be totally awesome is the custom previewer.
The feature is still experimental, but hopefully someday it&amp;#39;ll be easy to register custom formatter for your favorite application and framework objects. These previews will help make the objects prettier in the console and source panel.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;RemoteObject = function(object, forceValueType, generatePreview) {
  this.type = typeof object;

  if (isPrimitiveValue(object) || forceValueType)
  this.value = object;

  var subtype = injectedScript._subtype(object);
  if (subtype) this.subtype = subtype;

  var className = internalConstructorName(object);
  this.className = className;

  this.description = _describe(object);

  if (generatePreview) this.preview = this._generatePreview(object);

  if (_customObjectFormatterEnabled) this.customPreview = this._customPreview(object);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Closing Thoughts&lt;/h3&gt;

&lt;p&gt;I hope you enjoyed diving into chrome DevTools. The people who work on DevTools have
done a great job at making the project as accessible as possible. I&amp;#39;ll try and put together a couple more
deep dives going forward, I&amp;#39;ve just begun exploring the project
the past couple months, but already I&amp;#39;ve learned so much.&lt;/p&gt;
</description>
                                <pubDate>Sun, 01 Mar 2015 00:00:00 -0500</pubDate>
                                <link>http://jasonlaster.github.io//js/devtools/2015/03/01/devtools-paused.html</link>
                                <guid isPermaLink="true">http://jasonlaster.github.io//js/devtools/2015/03/01/devtools-paused.html</guid>
                        </item>
                
                        <item>
                                <title>Backbone Models in 10 tests</title>
                                <description>&lt;p&gt;I think understanding Libraries and Frameworks is one of the most fundatmental things a Software Engineer can do. Understanding the underlying system allows you to get the most out of it. It helps you design new features and debug knarly bugs. &lt;/p&gt;

&lt;p&gt;Understanding the system that&amp;#39;s one or two layers below your software also helps you understand that abstraction that it&amp;#39;s built on top of. This layer is more generic by necesssity and will help you understand the shape of your objects and the constraints they will adhere to.&lt;/p&gt;

&lt;p&gt;So, how do you go about building this understanding. A good place to start is tutorials and books. These resources will give a good overview and theoretical grounding, but you won&amp;#39;t get your hands dirty. You could download the code and read it. This is often frustrating because the libraries are mature and even the core classes have several edge-cases and feature bloat that will make it hard to understand. The best way to find the core bit of logic is to use git to go back in time to when the library was just built. The developer was probably thinking about building the &amp;quot;simplest&amp;quot; thing and that&amp;#39;ll be the code you want to read and play with. &lt;/p&gt;

&lt;p&gt;Reading code will probably only get you so far. Reading is mostly a passive activity and learning is best when it&amp;#39;s active exploration. There are three good ways to play with a Library: fix a bug, remove a key component and try and add it, build tests or code that exercises it. All of these activities are better by going back in time with git. A bug in the early days is more fundamental and interesting. A commit could cover an entirely new feature, so if you&amp;#39;re reading the commit logs and find a featrue that you want to add, checkout the commit before and try and implement it yourself. &lt;/p&gt;

&lt;p&gt;The other day, I was designing an interview for a front-end dev and wanted it to be hands-on conversation provoking so I built most of Backbone&amp;#39;s Model and Event classes as it looked a month after the first commit in 10 unit tests. I called the project Barebones!&lt;/p&gt;

&lt;h3&gt;Here are the 10 unit tests:&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Model set &lt;/li&gt;
&lt;li&gt;Model get &lt;/li&gt;
&lt;li&gt;Model initialize&lt;/li&gt;
&lt;li&gt;Model defaults&lt;/li&gt;
&lt;li&gt;Model bind&lt;/li&gt;
&lt;li&gt;Model trigger&lt;/li&gt;
&lt;li&gt;Model trigger with scope&lt;/li&gt;
&lt;li&gt;Model trigger with args&lt;/li&gt;
&lt;li&gt;Model set, which triggers a change event&lt;/li&gt;
&lt;li&gt;Model default should not trigger a change event&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As an exercise, I&amp;#39;m really happy with how the finished product is a usable data object. I also really like how the tests build on each other. Set and Get are trivial primitives, but layering in defaults and event-hooks makes you re-think strategies for reading and writing the data. &lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/jasonLaster/Barebone&quot;&gt;Barebone Project&lt;/a&gt; on github. Also, checkout the commit history to see how each test was added. And if you want to do it yourself, I recommend deleting the barebone.js file and running the specs yourself!&lt;/p&gt;
</description>
                                <pubDate>Sun, 22 Sep 2013 08:25:24 -0400</pubDate>
                                <link>http://jasonlaster.github.io//js/tdd/2013/09/22/extend.html</link>
                                <guid isPermaLink="true">http://jasonlaster.github.io//js/tdd/2013/09/22/extend.html</guid>
                        </item>
                
        </channel>
</rss>
